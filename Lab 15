class ArithmeticProgressionIterator:
    def __init__(self, start, step):
        self.current = start
        self.step = step

    def __iter__(self):
        return self

    def __next__(self):
        value = self.current
        self.current += self.step
        return value

def arithmetic_progression_generator(start, step):
    current = start
    while True:
        yield current
        current += step

def sum_of_first_n_elements(iterator, n):
    total_sum = 0
    for _ in range(n):
        total_sum += next(iterator)
    return total_sum

if __name__ == "__main__":
    start = 1
    step = 3

    iterator = ArithmeticProgressionIterator(start, step)
    generator = arithmetic_progression_generator(start, step)

    elements_counts = [100, 1000, 10000, 100000, 1000000]

    for count in elements_counts:
        print(f"Сума перших {count} елементів (ітератор): {sum_of_first_n_elements(iter(iterator), count)}")
        print(f"Сума перших {count} елементів (генератор): {sum_of_first_n_elements(generator, count)}")
